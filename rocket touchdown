#include <Wire.h>
#include <MPU6050.h>
#include <SPI.h>
#include <SD.h>

int i;

// Pin for SD card module
#define SD_CS_PIN 10
// Pin to control parachute deployment
#define PARACHUTE_PIN 9
// Create an instance of the MPU6050 sensor
MPU6050 mpu;

// Variables for altitude tracking (e.g., using a barometer)
float previousAltitude = 0.0;
float currentAltitude = 0.0;
float altitudeChangeRate = 0.0;
unsigned long touchdownTime = 0;  // Timer to capture touchdown time
bool touchdownLogged = false;

// Thresholds for detecting touchdown
#define ALTITUDE_CHANGE_THRESHOLD 0.05  // Threshold for minimal altitude change (in meters)

// File object for logging
File logFile;

void setup() {
  // Start serial communication
  Serial.begin(9600);

  // Initialize the MPU6050 sensor
  Wire.begin();
  mpu.initialize();

  // Check if the MPU6050 is connected
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed!");
    while (1);
  }

  // Initialize SD card
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("SD card initialization failed!");
    return;
  }
  Serial.println("SD card is ready.");

  // Open the file for logging data
  logFile = SD.open("log.txt", FILE_WRITE);
  if (logFile) {
    logFile.println("Time (ms), Event, Altitude (meters), Altitude Change Rate (m/s), Elapsed Time (ms)");  // Header for the log file
    logFile.close();
  } else {
    Serial.println("Error opening log file.");
  }

  // Set the parachute pin as output
  pinMode(PARACHUTE_PIN, OUTPUT);
  digitalWrite(PARACHUTE_PIN, LOW);  // Initially, parachute is not deployed

  // Initialize altitude variables
  previousAltitude = 0.0;
  currentAltitude = 0.0;
  altitudeChangeRate = 0.0;
  touchdownLogged = false;
}

void loop() {
  // Get altitude data (simulating here, replace with real sensor data)
  // You could replace this part with a real altitude sensor or barometer.
  // Example using MPU6050's accelerometer data for altitude simulation.
  
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);
  
  // Simulating altitude change using the Z-axis accelerometer data (in real scenario, use actual altitude sensor)
  currentAltitude = az / 1000.0;  // Simulated altitude change based on accelerometer data (this is just an example)

  // Calculate altitude change rate (m/s)
  unsigned long currentTime = millis();
  altitudeChangeRate = (currentAltitude - previousAltitude) / (currentTime - touchdownTime); // in meters per second

  // Log the altitude data and change rate for debugging purposes
  Serial.print("Altitude: ");
  Serial.print(currentAltitude);
  Serial.print(" meters, ");
  Serial.print("Change rate: ");
  Serial.print(altitudeChangeRate);
  Serial.println(" m/s");

  // Check if the altitude change rate is below the threshold (indicating touchdown)
  if (abs(altitudeChangeRate) < ALTITUDE_CHANGE_THRESHOLD && !touchdownLogged) {
    // Log touchdown event
    touchdownTime = currentTime;
    touchdownLogged = true;
    logEvent("Touchdown Detected", currentTime, currentAltitude, altitudeChangeRate);
  }

  // Update previous altitude for next loop
  previousAltitude = currentAltitude;

  // Small delay to reduce sensor reading frequency
  delay(100);
}

void logEvent(String event, unsigned long currentTime, float altitude, float changeRate) {
  // Calculate the elapsed time since the touchdown
  unsigned long elapsedTime = currentTime - touchdownTime;

  // Log to Serial Monitor
  Serial.print("Time: ");
  Serial.print(currentTime);
  Serial.print(", Event: ");
  Serial.print(event);
  Serial.print(", Altitude: ");
  Serial.print(altitude);
  Serial.print(" meters, Change Rate: ");
  Serial.print(changeRate);
  Serial.print(" m/s, Elapsed Time: ");
  Serial.println(elapsedTime);

  // Log to SD card
  logFile = SD.open("log.txt", FILE_WRITE);
  if (logFile) {
    logFile.print(currentTime);
    logFile.print(", ");
    logFile.print(event);
    logFile.print(", ");
    logFile.print(altitude);
    logFile.print(", ");
    logFile.print(changeRate);
    logFile.print(", ");
    logFile.println(elapsedTime);
    logFile.close();  // Close the file after writing
  } else {
    Serial.println("Error opening log file.");
  }
}